class Solution {
    private Boolean[][] memo;

    private boolean isPalindrom(int i, int j, String s) {
        if (i >= j) return true;

        if (memo[i][j] != null) return memo[i][j];

        if (s.charAt(i) != s.charAt(j)) {
            memo[i][j] = false;
        } else {
            memo[i][j] = isPalindrom(i + 1, j - 1, s);
        }

        return memo[i][j];
    }

    public int minCut(String s) {
        int n = s.length();
        int[] dp = new int[n + 1];
        dp[n] = 0;

        memo = new Boolean[n][n]; // initialize memoization table

        for (int i = n - 1; i >= 0; i--) {
            int min = Integer.MAX_VALUE;
            for (int k = i; k < n; k++) {
                if (isPalindrom(i, k, s)) {
                    int x = 1 + dp[k + 1];
                    min = Math.min(min, x);
                }
            }
            dp[i] = min;
        }

        return dp[0] - 1;
    }
}
