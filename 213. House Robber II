class Solution {

    public int solve(int nums[], int n, int dp[]){
        if(n < 0) return 0;

        if(n == 0) return nums[0];

        if(dp[n] != -1) return dp[n];

        int pick = nums[n] + solve(nums, n-2, dp);
        int notPick = 0 + solve(nums, n-1, dp);

        return dp[n] = Math.max(pick, notPick);
    }
    public int rob(int[] nums) {
        int n = nums.length;

        if(n == 1) return nums[0];

        int temp1[] = new int[n-1];
        int temp2[] = new int[n-1];
        
        for(int i=0; i<=n-2; i++){
            temp1[i] = nums[i];
        }
        for(int i=1; i<=n-1; i++){
            temp2[i-1] = nums[i];
        }
       int dp1[] = new int[n];
       int dp2[] = new int[n]; 

       Arrays.fill(dp1, -1);
       Arrays.fill(dp2, -1);

       int ans1 = solve(temp1, n-2, dp1);
       int ans2 = solve(temp2, n-2, dp2);

       return Math.max(ans1, ans2);
    }
}
