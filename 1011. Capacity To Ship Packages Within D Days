class Solution {

    private boolean helper(int[] weights, int days, int capacity){
        int currCap = weights[0];
        int currDays= 1;
        for(int i=1; i<weights.length; i++){
            currCap += weights[i];
            if(currCap > capacity){
                currDays++;
                currCap = weights[i];
            }
        }
        return currDays <= days;
    }
    public int shipWithinDays(int[] weights, int days) {
        int n = weights.length;
        int maxVal = weights[0]; // min val(1 se 10 ke bich ka number)
        int sum = weights[0];            // maxVal(1 to 10 ka sum)
        for(int i=1; i<n; i++){
            maxVal = Math.max(maxVal, weights[i]);
            sum += weights[i];
        }
        int low = maxVal;
        int high = sum;
        int ans =-1;
        while(low <= high){
            int mid = low + (high-low)/2;
            if(helper(weights, days, mid)){
                ans = mid;
                high = mid-1;
            } else {
                low = mid+1;
            }
        }
        return ans;
    }
}
