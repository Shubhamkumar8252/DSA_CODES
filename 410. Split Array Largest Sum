class Solution {
    private boolean helper(int[] nums, int k, int target){
      int val = nums[0];
        int count =1;

        for(int i=1; i<nums.length; i++){
            val += nums[i];
            if(val > target){
                count++;
                val = nums[i];
            }
        }
        return count <= k;
    }

    public int splitArray(int[] nums, int k) {
        int n = nums.length;
        int maxVal = nums[0];
        int sum = nums[0];

        //find max ele and total sum
        for(int i=1; i<n; i++){
            maxVal = Math.max(maxVal, nums[i]);
            sum += nums[i];
        }

        int low = maxVal, high = sum, ans =-1;

        //binary search for min largest sum
        while(low <= high){
            int mid = low + (high-low)/2; 
            if(helper(nums, k, mid)){
                ans = mid;
                high = mid - 1;
            } else {
                low  = mid + 1;
            }
        }
        return ans;
    }
}
