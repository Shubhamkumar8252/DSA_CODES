class Solution {
    public ListNode sortList(ListNode head) {

        if(head == null || head.next == null) return head;
        ListNode mid = middleNode(head);
        ListNode left = sortList(head);
        ListNode right = sortList(mid);
        return mergeTwoLists(left, right);
    }

        ListNode mergeTwoLists(ListNode list1, ListNode list2){
            ListNode head = new ListNode();
            ListNode dummy = head;

            while(list1 != null && list2 != null){
                 if(list1.val < list2.val){
                   head.next = list1;
                   list1 = list1.next;
            } else {
                head.next = list2;
                list2 = list2.next;
            }
                head = head.next;
            }

            while(list1 != null){
                head.next = list1;
                head = head.next;
                list1 = list1.next;
            }

             while(list2 != null){
                head.next = list2;
                head = head.next;
                list2 = list2.next;
            }
            return dummy.next;
            }
            ListNode middleNode(ListNode head){
              ListNode midPrev = null;
              while(head != null && head.next != null){
                midPrev = (midPrev == null) ? head : midPrev.next;
                head = head.next.next;
                }
                ListNode mid = midPrev.next;
                midPrev.next = null;
                return mid;
        }
    }
